{"version":3,"sources":["ui-core/Button/Button.js","ui-core/Card/Card.js","ui-core/Carousel/Carousel.js","ui-core/ToggleButton/ToggleButton.js","ui-core/Dropdown/Dropdown.js","utils/common.js","ui-core/Section/Section.js","constants/CarouselEditorConstants.js","components/CarouselManager/CarouselManager.js","localization/english.js","components/ImageSelector/ImageSelector.js","components/ImageViewer/ImagerViewer.js","pages/CarouselEditorPage/CarouselEditorPage.js","App.js","serviceWorker.js","index.js"],"names":["button","props","buttonClases","isDisabled","className","onClick","disabled","children","card","captionClasses","imageClasses","isCaptionInside","isSelected","caption","isCaptionVisible","cardContent","source","src","alt","onImageClick","Carousel","useState","currentPage","setCurrentPage","prevItemsToDisplay","setPrevItemsToDisplay","imagesPerPage","imageFlexWidth","itemsToDisplay","prevButtonClass","nextButtonClass","images","forEach","image","index","push","indexWhereImageBelongs","Math","floor","length","amountOfEmptySlots","pageIndexWithEmptySlots","i","fillEmptySlots","useEffect","pageIndex","imagesToRender","map","imageIndex","style","flex","key","imageName","imageCaption","dots","img","toggleButton","onToggleClick","type","dropdown","renderOption","items","item","onChange","event","target","value","sortArrayBy","array","propertyName","sort","a","b","section","title","actions","body","IMAGES_PER_TIME","DEFAULT_IMAGES_PER_TIME","CarouselManager","isEditMode","setIsEditMode","imagesPerTime","setImagesPerTime","selectedAmount","setSelectedAmount","setImages","updateSelectedImage","clickedImage","updatedImages","updateSelectedAmount","unselectImages","amount","imagesToRemove","imagesToRemain","onRemoveImages","imageClickHandler","ImageSelector","imagesToAdd","onAddImages","imageViewer","CarouselEditorPage","carouselImages","setCarouselImages","selectorImages","setSelectorImages","imageToView","setImageToView","result","data","rawImage","validateImageOnImageViewer","removedImages","find","resetSelectedState","imagesToReset","addedImages","remainingImages","addImagesHandler","removeImagesHandler","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.783e9b89.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.scss';\n\nconst button = (props) => {\n  let buttonClases = 'uc-button';\n  buttonClases = props.isDisabled ? `${buttonClases} uc-button__disabled` : buttonClases;\n\n  return (\n    <button className={buttonClases} onClick={props.onClick} disabled={props.isDisabled}>\n      { props.children }\n    </button>\n  );\n}\n\nexport default button;","import React from 'react';\nimport './Card.scss';\n\nconst card = (props) => {\n  let captionClasses = 'uc-card__caption';\n  let imageClasses = 'uc-card__image';\n\n  captionClasses = props.isCaptionInside ? `${captionClasses} caption-inside` : captionClasses;\n  imageClasses = props.isSelected ? `${imageClasses} image-selected` : imageClasses;\n\n  const caption = props.isCaptionVisible\n    ? <div className={captionClasses}>\n        <label> { props.caption } </label>\n      </div>\n    : null;\n\n  const cardContent = props.source\n    ? <img className={imageClasses}\n           src={props.source}\n           alt={props.caption}\n           onClick={props.onImageClick}/>\n    : <div className=\"uc-card__empty\"></div>;\n\n  return (\n    <div className=\"uc-card\">\n      { cardContent }\n      { caption }\n    </div>\n  );\n};\n\nexport default card;","import React, { useState, useEffect } from 'react';\nimport './Carousel.scss';\nimport Card from '../Card/Card';\n\nconst FIRST_PAGE = 0;\n\nconst Carousel = (props) => {\n  const [ currentPage, setCurrentPage ] = useState(FIRST_PAGE);\n  const [ prevItemsToDisplay, setPrevItemsToDisplay ] = useState(FIRST_PAGE);\n  const imagesPerPage = [];\n  const imageFlexWidth = `${100 / props.itemsToDisplay}%`;\n  let prevButtonClass = 'uc-carousel__previous';\n  let nextButtonClass = 'uc-carousel__next';\n  paginateImages();\n  prevButtonClass = currentPage !== FIRST_PAGE ? prevButtonClass : `${prevButtonClass} button-disabled`;\n  nextButtonClass = currentPage === imagesPerPage.length-1 ? `${nextButtonClass} button-disabled` : nextButtonClass;\n\n  /**\n   * Navigates to first page when a new amount of items to display is set\n   */\n  useEffect(() => {\n    if(prevItemsToDisplay !== props.itemsToDisplay && currentPage !== FIRST_PAGE) {\n      setCurrentPage(FIRST_PAGE);\n    }\n    setPrevItemsToDisplay(props.itemsToDisplay);\n  }, [props.itemsToDisplay]);\n\n  /**\n   * Navigates to first page when images are removed or added\n   */\n  useEffect(() => {\n    setCurrentPage(FIRST_PAGE);\n  }, [props.images.length]);\n\n  const pageIndex =  currentPage > imagesPerPage.length-1 ? FIRST_PAGE : currentPage;\n  const imagesToRender = imagesPerPage[pageIndex].map((image, index) => {\n    const imageIndex = currentPage * props.itemsToDisplay + index;\n    return (\n      <div className=\"uc-carousel-container__card\"\n          style={{ flex: imageFlexWidth }}\n          key={index}>\n        <Card source={image.imageName}\n              caption={image.imageCaption}\n              isCaptionVisible={props.isCaptionVisible}\n              isCaptionInside\n              onImageClick={() => props.onImageClick(image, imageIndex)}\n              isSelected={image.isSelected}/>\n      </div>\n    );\n  });\n\n  const dots = imagesPerPage.map((img, index) => <div key={index} className=\"uc-dot\"></div>);\n\n  return (\n    <div className=\"uc-carousel\">\n      <button className={prevButtonClass}\n              onClick={() => setCurrentPage(currentPage-1)}\n              disabled={currentPage === FIRST_PAGE}/>\n      <div className=\"uc-carousel__container\">{ imagesToRender }</div>\n      <button className={nextButtonClass}\n              onClick={() => setCurrentPage(currentPage+1)}\n              disabled={currentPage === imagesPerPage.length-1}/>\n      <div className=\"uc-carousel__dots\">{ dots }</div>\n    </div>\n  );\n\n  function paginateImages() {\n    createPagesAndAssignElements();\n    fillEmptySlots();   \n  }\n\n  function createPagesAndAssignElements() {\n    props.images.forEach((image, index) => {\n      const needNewPage = index % props.itemsToDisplay === 0;\n      if(needNewPage) {\n        imagesPerPage.push([]);\n      }\n      const indexWhereImageBelongs = Math.floor(index/props.itemsToDisplay);\n      imagesPerPage[indexWhereImageBelongs].push(image);\n    });\n  }\n\n  function fillEmptySlots() {\n    const areEmptySlots = props.images.length % props.itemsToDisplay !== 0;\n    if(areEmptySlots || props.images.length === 0) {\n      const amountOfEmptySlots = props.itemsToDisplay - (props.images.length % props.itemsToDisplay);\n      const pageIndexWithEmptySlots = props.images.length === 0 ? 0 : imagesPerPage.length-1;\n\n      if(props.images.length === 0) {\n        imagesPerPage.push([]);\n      }\n\n      for(let i = 0; i<amountOfEmptySlots; i++) {\n        imagesPerPage[pageIndexWithEmptySlots].push({});\n      }\n    }\n  }\n};\n\nexport default Carousel;","import React from 'react';\nimport './ToggleButton.scss';\n\nconst toggleButton = (props) => (\n  <div className=\"uc-toggle\">\n    <label className=\"uc-toggle-title\">{ props.children }</label>\n    <label className=\"uc-toggle-label\">\n      <input onClick={props.onToggleClick} type=\"checkbox\"/>\n      <span className=\"uc-toggle-label__slider\"/>\n    </label>\n  </div>\n);\n\nexport default toggleButton;","import React from 'react';\nimport './Dropdown.scss';\n\nconst dropdown = (props) => {\n  const renderOption = props.items.map((item, index) => (\n    <option key={index} className=\"uc-dd-list__item\">{ item }</option>\n  ));\n  \n  return (\n    <div className=\"uc-dropdown\">\n      <div className=\"uc-dd__select\">\n        <select className=\"uc-dd-list\" onChange={(event) => props.onChange(event.target.value)}>\n          { renderOption }\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default dropdown;","export const sortArrayBy = (array, propertyName) =>\n   array.sort((a, b) =>\n    (a[propertyName] > b[propertyName]) ? 1 : -1);","import React from 'react';\nimport './Section.scss';\n\nconst section = (props) => (\n  <div className=\"uc-section\">\n    <div className=\"uc-section__title\">{ props.title }</div>\n    <div className=\"uc-section__actions\">{ props.actions }</div>\n    <div className=\"uc-section__body\">{ props.body }</div>\n  </div>\n);\n\nexport default section;","export const IMAGES_PER_TIME = [ 2, 3, 4, 5 ];\nexport const IMAGE_CAPTION_PROPERTY = 'imageCaption';\nexport const DEFAULT_IMAGES_PER_TIME = IMAGES_PER_TIME[0];\nexport const DEFAULT_EDITION_MODE = false;\nexport const DEFAULT_SELECTED_IMAGE_STATE = false;\nexport const IMAGES_PATH = './images';\n","import React, { useState, useEffect } from 'react';\nimport './CarouselManager.scss';\nimport Button from '../../ui-core/Button/Button';\nimport Carousel from '../../ui-core/Carousel/Carousel';\nimport ToggleButton from '../../ui-core/ToggleButton/ToggleButton';\nimport Dropdown from '../../ui-core/Dropdown/Dropdown';\nimport { sortArrayBy } from '../../utils/common';\nimport Section from '../../ui-core/Section/Section';\nimport { CAROUSEL, REMOVE, EDIT_MODE, VIEW_MODE } from '../../localization/english';\nimport {\n  IMAGES_PER_TIME,\n  IMAGE_CAPTION_PROPERTY,\n  DEFAULT_IMAGES_PER_TIME,\n  DEFAULT_EDITION_MODE\n} from '../../constants/CarouselEditorConstants';\n\nconst CarouselManager = (props) => {\n  const [ isEditMode, setIsEditMode ] = useState(DEFAULT_EDITION_MODE);\n  const [ imagesPerTime, setImagesPerTime ] = useState(DEFAULT_IMAGES_PER_TIME);\n  const [ selectedAmount, setSelectedAmount ] = useState(0);\n  const [ images, setImages ] = useState([]);\n\n  useEffect(() => {\n    setImages(sortArrayBy(props.images, IMAGE_CAPTION_PROPERTY));\n  }, [props.images]);\n  \n  const imageClickHandler = (clickedImage, index) => {\n    if(!isEditMode) {\n      return props.onImageClick(clickedImage);\n    }\n\n    updateSelectedImage(clickedImage, index);\n    updateSelectedAmount(clickedImage);\n  }\n\n  const updateSelectedImage = (clickedImage, index) => {\n    const updatedImages = [ ...images ];\n    updatedImages[index].isSelected = !clickedImage.isSelected;\n    setImages(updatedImages);\n  }\n\n  const updateSelectedAmount = (image) => {\n    image.isSelected\n      ? setSelectedAmount(selectedAmount+1)\n      : setSelectedAmount(selectedAmount-1);\n  }\n\n  const removeHandler = () => {\n    const imagesToRemove = [];\n    const imagesToRemain = [];\n    images.forEach((image) => {\n      image.isSelected ? imagesToRemove.push(image) : imagesToRemain.push(image);\n    });\n    setImages(imagesToRemain);\n    setSelectedAmount(0);\n\n    return props.onRemoveImages(imagesToRemove, imagesToRemain);\n  }\n\n  const toggleModeHandler = () => {\n    unselectImages();\n    setIsEditMode(!isEditMode);\n  }\n\n  const unselectImages = () => {\n    images.forEach(image => image.isSelected = false);\n    setSelectedAmount(0);\n  }\n\n  const actions = (\n    <>\n      <ToggleButton onToggleClick={toggleModeHandler}>\n        { isEditMode ? EDIT_MODE : VIEW_MODE }\n      </ToggleButton>\n      <Dropdown items={IMAGES_PER_TIME} onChange={(amount) => setImagesPerTime(amount)}/>\n      { \n        isEditMode\n          ? <Button onClick={removeHandler}\n                    isDisabled={selectedAmount === 0}>\n            { REMOVE }\n          </Button>\n          : null\n      }\n    </>\n  );\n\n  const body = (\n    <div className=\"cm__carousel\">\n      <Carousel images={images}\n                itemsToDisplay={imagesPerTime}\n                isCaptionVisible={!isEditMode}\n                onImageClick={(clickedImage, index) => imageClickHandler(clickedImage, index)}\n                isCaptionInside/>\n    </div>\n  );\n\n  return (\n    <div className=\"carousel-manager\">\n      <Section title={CAROUSEL}\n               actions={actions}\n               body={body}/>\n    </div>\n  );\n};\n\nexport default CarouselManager;","export const CAROUSEL = 'Carousel';\nexport const IMAGE_SELECTOR = 'Image Selector';\nexport const IMAGE_VIEWER = 'Image Viewer';\nexport const CAROUSEL_EDITOR = 'Carousel Editor';\n\nexport const EDIT_MODE = 'Edit Mode';\nexport const VIEW_MODE = 'View Mode';\n\nexport const ADD = 'Add';\nexport const REMOVE = 'Remove';\n\nexport const NO_IMAGE_SELECTED = 'No image selected';\n","import React, { useState, useEffect } from 'react';\nimport './ImageSelector.scss';\nimport Card from '../../ui-core/Card/Card';\nimport Button from '../../ui-core/Button/Button';\nimport { sortArrayBy } from '../../utils/common';\nimport Section from '../../ui-core/Section/Section';\nimport { IMAGE_SELECTOR, ADD } from '../../localization/english';\nimport { IMAGE_CAPTION_PROPERTY } from '../../constants/CarouselEditorConstants';\n\nconst ImageSelector = (props) => {\n  const [ images, setImages ] = useState([]);\n  const [ selectedAmount, setSelectedAmount ] = useState(0);\n\n  useEffect(() => {\n    setImages(sortArrayBy(props.images, IMAGE_CAPTION_PROPERTY));\n  }, [props.images]);\n\n  const imageClickHandler = (clickedImage, index) => {\n    updateSelectedImage(clickedImage, index);\n    updateSelectedAmount(clickedImage);\n  }\n\n  const updateSelectedImage = (clickedImage, index) => {\n    const updatedImages = [ ...images ];\n    updatedImages[index].isSelected = !clickedImage.isSelected;\n    setImages(updatedImages);\n  }\n\n  const updateSelectedAmount = (image) => {\n    image.isSelected \n      ? setSelectedAmount(selectedAmount+1)\n      : setSelectedAmount(selectedAmount-1);\n  }\n\n  const addHandler = () => {\n    const imagesToAdd = [];\n    const imagesToRemain = [];\n    images.forEach((image) => {\n      image.isSelected ? imagesToAdd.push(image) : imagesToRemain.push(image);\n    });\n    setImages(imagesToRemain);\n    setSelectedAmount(0);\n\n    return props.onAddImages(imagesToAdd, imagesToRemain);\n  }\n\n  const imagesToRender = images.map((image, index) => \n    <div className=\"is_container__card\"\n         key={index}>\n      <Card source={image.imageName}\n            caption={image.imageCaption}\n            isSelected={image.isSelected}\n            onImageClick={() => imageClickHandler(image, index)}\n            isCaptionVisible/>\n    </div>\n  );\n\n  const actions = (\n    <div className=\"is__actions\">\n      <Button onClick={addHandler}\n              isDisabled={selectedAmount === 0}>\n        { ADD }\n      </Button>\n    </div>\n  );\n\n  const body = (\n    <div className=\"is__container\">\n      { imagesToRender }\n    </div>\n  );\n\n  return (\n    <div className=\"image-selector\">\n      <Section title={IMAGE_SELECTOR}\n               actions={actions}\n               body={body}/>\n    </div>\n  );\n};\n\nexport default ImageSelector;","import React from 'react';\nimport './ImageViewer.scss';\nimport Card from '../../ui-core/Card/Card';\nimport Section from '../../ui-core/Section/Section';\nimport { IMAGE_VIEWER, NO_IMAGE_SELECTED } from '../../localization/english';\n\nconst imageViewer = (props) => {\n  const body = (\n    <div className=\"iv__content\">\n      { \n        props.image.imageName\n          ? <Card source={props.image.imageName}\n                  caption={props.image.imageCaption}\n                  isCaptionVisible/>\n          : NO_IMAGE_SELECTED\n      }\n    </div>\n  );\n\n  return (\n    <div className=\"image-viewer\">\n      <Section title={IMAGE_VIEWER}\n               body={body}/>\n    </div>\n  );\n};\n\nexport default imageViewer;","import React, { useState, useEffect } from 'react';\nimport './CarouselEditorPage.scss';\nimport CarouselManager from '../../components/CarouselManager/CarouselManager';\nimport ImageSelector from '../../components/ImageSelector/ImageSelector';\nimport ImageViewer from '../../components/ImageViewer/ImagerViewer';\nimport data from '../../data/carouselImages.json';\nimport { CAROUSEL_EDITOR } from '../../localization/english';\nimport { IMAGES_PATH, DEFAULT_SELECTED_IMAGE_STATE } from '../../constants/CarouselEditorConstants';\n\nconst CarouselEditorPage = () => {\n  const [ carouselImages, setCarouselImages ] = useState([]);\n  const [ selectorImages, setSelectorImages ] = useState([]);\n  const [ imageToView, setImageToView ] = useState({});\n\n  /**\n   * On creation, will get and parse the data to be\n   * rendered\n   */\n  useEffect(() => {\n    const result = data.carouselImages.map((rawImage) => ({\n      ...rawImage,\n      imageName: `${IMAGES_PATH}/${rawImage.imageName}`,\n      isSelected: DEFAULT_SELECTED_IMAGE_STATE\n    }));\n    setSelectorImages(result);\n  }, []);\n\n  const carouselImageClickHandler = (clickedImage) => {\n    setImageToView(clickedImage);\n  };\n\n  const removeImagesHandler = (removedImages, remainingImages) => {\n    resetSelectedState(removedImages);\n    setSelectorImages([...selectorImages, ...removedImages]);\n    setCarouselImages(remainingImages);\n    validateImageOnImageViewer(removedImages);\n  };\n\n  /**\n   * Verifies if the current image in the Image Viewer is being\n   * removed from the carousel, to remove it also from the\n   * Image Viewer\n   * @param {*} removedImages \n   */\n  const validateImageOnImageViewer = (removedImages) => {\n    const clearImageViewer = removedImages.find(image => image.imageName === imageToView.imageName);\n    if(!!clearImageViewer) {\n      setImageToView({});\n    }\n  }\n\n  const addImagesHandler = (addedImages, remainingImages) => {\n    resetSelectedState(addedImages);\n    setCarouselImages([...carouselImages, ...addedImages]);\n    setSelectorImages(remainingImages);\n  }\n\n  const resetSelectedState = (imagesToReset) => {\n    imagesToReset.forEach((image) => image.isSelected = DEFAULT_SELECTED_IMAGE_STATE);\n  }\n\n  return (\n    <div className=\"carousel-editor-page\">\n      <h1>{ CAROUSEL_EDITOR }</h1>\n      <ImageSelector images={selectorImages}\n                     onAddImages={(addedImages, remainingImages) => addImagesHandler(addedImages, remainingImages)}/>\n      <CarouselManager images={carouselImages}\n                       onRemoveImages={(removedImages, remainingImages) => removeImagesHandler(removedImages, remainingImages)}\n                       onImageClick={(image) => carouselImageClickHandler(image)}/>\n      <ImageViewer image={imageToView}/>\n    </div>\n  );\n};\n\nexport default CarouselEditorPage;","import React from 'react';\nimport './App.scss';\nimport CarouselEditorPage from './pages/CarouselEditorPage/CarouselEditorPage';\n\nfunction App() {\n  return <CarouselEditorPage/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}